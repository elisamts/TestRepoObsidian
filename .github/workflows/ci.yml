# Workflow name
name: Build and Test

# Trigger the workflow on push to 'main' branch or manually via the GitHub UI
on:
  push:
    branches: ["main"]
  workflow_dispatch:

jobs:
  # First job: Build and test the Quartz site
  build-and-test:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner
    permissions:
      contents: write  # Allow write access to repository contents

    steps:
      # Step 1: Checkout the repository code
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for accurate change tracking

      # Step 2: Setup Node.js environment
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20  # Use Node.js version 20

      # Step 3: Cache npm dependencies to speed up builds
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm  # Cache the npm directory
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}  # Unique cache key based on lock file
          restore-keys: |
            ${{ runner.os }}-node-  # Fallback key if exact match isn't found

      # Step 4: Install project dependencies
      - run: npm install
        working-directory: ./source  # Run inside the 'source' directory

      # Step 5: Make the Quartz CLI script executable
      - name: chmod
        run: chmod +x ./quartz/bootstrap-cli.mjs
        working-directory: ./source

      # Step 6: Build the Quartz site and output bundle info
      - name: Ensure Quartz builds
        run: npx quartz build --bundleInfo
        working-directory: ./source

  # Second job: Deploy the site to GitHub Pages
  deploy:
    needs: build-and-test  # Run only after 'build-and-test' completes successfully
    permissions:
      contents: read  # Read access to repository contents
      pages: write  # Write access to GitHub Pages
      id-token: write  # Required for OIDC authentication

    environment:
      name: github-pages  # Target deployment environment
      url: ${{ steps.deployment.outputs.page_url }}  # Set the deployment URL

    runs-on: ubuntu-latest  # Use the latest Ubuntu runner

    steps:
      # Step 1: Checkout the repository code again
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Setup Node.js environment again
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Step 3: Rebuild the Quartz site for deployment
      - name: Build Quartz
        run: |
          npm install
          npx quartz build
        working-directory: ./source

      # Step 4: Copy raw HTML files into the public directory (optional fallback content)
      - name: Copy raw HTML folder
        run: |
          ls -la
          cp -r raw_html/* public/ || true  # Ignore errors if raw_html doesn't exist
          echo "Contents of public directory:"
          ls -la public/
        working-directory: ./source

      # Step 5: Configure GitHub Pages deployment
      - name: Setup GitHub Pages
        uses: actions/configure-pages@v4

      # Step 6: Upload the built site as an artifact for GitHub Pages
      - name: Upload GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./source/public  # Path to the built site
          retention-days: 1  # Keep the artifact for 1 day

      # Step 7: Deploy the site to GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
